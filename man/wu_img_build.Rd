% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wu_img_build.R
\name{wu_img_build}
\alias{wu_img_build}
\title{Generate a list of HTML tags to show stacked PNGs}
\usage{
wu_img_build(
  img_fns,
  display_first = TRUE,
  img_class = "stackme",
  center = FALSE,
  border = c("none", "1px solid gray")[1],
  include_css = FALSE,
  base_dir = NULL
)
}
\arguments{
\item{img_fns}{A vector of image files names}

\item{display_first}{Display the first image initially}

\item{img_class}{The class that image tags will be assigned}

\item{center}{Center the DIV on the document}

\item{border}{A valid CSS style for the DIV border}

\item{include_css}{Include the CSS for the images}

\item{base_dir}{Where to look for the files#'}
}
\description{
Generate a list of HTML tags to show stacked PNGs
}
\details{
This will return a list of HTML tags that when inserted into a R markdown HTML document
will display the PNG files as a build. You can use this function within code chunks
in R markdown to create a build effect from a set of PNG files. The PNG
files will be added to the DIV in the order received. All images should have the same
dimensions, and images after the first one should either have transparent backgrounds
or contain the earlier elements in them.

To use this function, add the following style definition to your Rmarkdown document. Alternately,
you can pass \code{include_css = TRUE}, but note that this will insert the style definition into
your HTML document each time you insert an image build, so you really only need to add
 \code{include_css = TRUE} on the first build in the slide deck.

\preformatted{
```{css echo = FALSE}
img.stackme {
  position:absolute;
  top:0;
  left:0;
}
```
}

Insert the build into your Markdown with something like:

\preformatted{
```{r echo = FALSE, results = "asis"}
paste0("./images/myslide_0", 1:6, ".png") %>%
  wrkshputils::wu_img_build(display_first = TRUE, center = FALSE) %>%
    htmltools::tagList()
```
}
}
